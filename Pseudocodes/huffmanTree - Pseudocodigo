
Algoritmo: huffmanTree
Entrada: vetor de caracteres C[1..n], e vetor/dicionario O[1..n]
Pré-condição: Para todo "c" pertencente a C, O[c] corresponde ao número de 
			  ocorrências do caracter "c".
Saída: uma árvore livre-de-prefixos "W"
Pós-condição: "W" minimiza o custo de uma compactação binária de textos
-----------------------------------------------------------------------------------
1. | CONSTRUA UM HEAP "H" NO QUAL CADA "c" PERTENCENTE A "C" TEM CHAVE "O[c]"
2. | ENQUANTO |H| > 1
3. |  | (a, va) := Extrair_Min(H)
4. |  | (a, vb) := Extrair_Min(H)
5. |  | c.filho_esq := a
6. |  | c.filho_dir := a
7. |  | INSERIR(H, (c, va+vb))
8. | RETORNE Extrair_Min(H)



######################################
EXEMPLO DO USO DO ALGORITMO DE HUFFMAN
######################################

Texto = "INTERESSANTE"

(Iremos colocar um "*" pra denotar os caracteres que serão unidos no Heap)
* Condição Inicial:
    -----------------------------
C = | I | N | T | E | R*| S | A*|
    -----------------------------
O = | 1 | 2 | 2 | 3 | 1 | 2 | 1 |
    -----------------------------

* 1ª Iteração:

    --------------------------
C = | I*| N*| T | E | RA | S |
    --------------------------
O = | 1 | 2 | 2 | 3 |  2 | 2 |
    --------------------------

Árvores:
	   .
	0 / \ 1
	(R) (A)


* 2ª Iteração:

    -----------------------
C = | IN | T*| E | RA*| S |
    -----------------------
O = |  3 | 2 | 3 |  2 | 2 |
    -----------------------

Árvores:
		.		   .
	 0 / \ 1	0 / \ 1
	 (I) (N)	(R) (A)


* 3ª Iteração:

    --------------------
C = | IN | TRA | E*| S*|
    --------------------
O = |  3 |  4  | 3 | 2 |
    --------------------

Árvores:
		  .
		 / \
	  0 /   \ 1				.	 
	   /     \ 		 	 0 / \ 1
	 (T)  0 / \ 1		 (I) (N)
	      (R) (A)


* 4ª Iteração:

    -----------------
C = | IN*| TRA*| ES |
    -----------------
O = |  3 |  4  |  5 |
    -----------------

Árvores:
					  .
					 / \
		.		  0 /   \ 1				.	 
	 0 / \ 1	   /     \ 		 	 0 / \ 1
	 (E) (S)	 (T)  0 / \ 1		 (I) (N)
				      (R) (A)


* 5ª Iteração:

    ---------------
C = | INTRA* | ES*|
    ---------------
O = |   7    |  5 |
    ---------------

Árvores:
		.							  
	   / \					
	0 /	  \	1			.	
	 /     \		 0 / \ 1
	/ 	 	\		 (E) (S)
 0 / \ 1  0/ \ 1			
 (I) (N)  /   \
        (T) 0/ \ 1
           (R) (A)


* 6ª Iteração:

    -----------
C = | INTRAES |
    ----------
O = |   12    |
    -----------

Árvore De Huffman (Final):
		   		.
	           / \
	        0 /   \
	         /     \ 1
	        /       \
	       /\        \
	      /  \ 1  0 / \ 1
	   0 /    \   (E) (S)
	    /      \
	   /    0 / \ 
	  /      /   \ 1
   0 / \ 1  (T)   \
   (I) (N)      0/ \ 1	
   			   (R) (A)
